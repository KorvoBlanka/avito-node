#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/..";

use Modern;

use Util::PhoneNum;

use Mojo::ByteStream;
use Mojo::UserAgent;
use DateTime;
use DateTime::Format::Strptime;
use Text::Trim;
use JSON;
use Data::Dumper;

$Data::Dumper::Terse = 1;
$Data::Dumper::Quotekeys = 0;

no warnings 'experimental';

my $timezone = '+10';

my $parser = DateTime::Format::Strptime->new( pattern => '%Y-%m-%d %H:%M:%S' );
my $media_id = 5;
# avito блочит ip после определенного кол-ва запросов, пуза между "категориями" для избежания блокировки
my $pause = 10;
my $avito_url = 'https://www.avito.ru';
my $m_avito_url = 'https://m.avito.ru';


my $META = {
    params => {
        ao_parent_guid => 'a4859da8-9977-4b62-8436-4e1b98c5d13f',
        default_phone_prefix => '4212',
        dict => {
            bathrooms => {
                '__field__' => 'bathroom_id',
                '^с\\/у\\s+смежн\\.?$' => 8,
                '^смежн\\.?\\s+с\\/у$' => 8,
                '^с\\/у\\s+разд\\.?$' => 3,
                '^без\\s+удобств$' => 1,
                '^с\\/у\\s+совм\\.?$' => 8
            },
            balconies => {
                '__field__' => 'balcony_id',
                '^б\\/з$' => 5,
                '^б\\/балк\\.?$' => 1,
                '^2\\s+лодж\\.?$' => 8,
                '^б\\/б$' => 1,
                '^балк\\.?$' => 2,
                '^лодж\\.?$' => 3,
                '^2\\s+балк\\.?$' => 7,
                '^л\\/з$' => 6
            },
            ap_schemes => {
                '__field__' => 'ap_scheme_id',
                '^улучшенная\\.?$' => 3,
                '^хрущевка\\.?$' => 2,
                '^хрущовка\\.?$' => 2,
                '^общежитие' => 6,
                '^индивидуальная\\.?$' => 6,
                '^индивидуальная\\.?\\s+планировка\\.?$' => 5,
                '^улучшенная\\.?$' => 3,
                '^брежневка\\.?$' => 3,
                '^новая\\.?\\s+планировка\\.?$' => 4,
                '^сталинка\\.?$' => 1,
                '^(?:улучшенная\\.?\\s+планировка\\.?)|(?:планировка\\.?\\s+улучшенная\\.?)|(?:улучшенная\\.)$' => 3,
                '^хрущ\\.?$' => 2,
                '^общежити' => 6,
                '^инд\\.?\\s+план\\.?$' => 5,
                '^брежн\\.?$' => 3,
                '^нов\\.?\\s+план\\.?$' => 4,
                '^стал\\.?$' => 1,
                '^(?:улучш\\.?\\s+план\\.?)|(?:план\\.?\\s+улучш\\.?)|(?:улучш\\.)$' => 3
            },
            house_types => {
                '__field__' => 'house_type_id',
                '^кирп\\.?$' => 1,
                '^монолит.+?\\-кирп\\.?$' => 7,
                '^монолитн?\\.?$' => 2,
                '^пан\\.?$' => 3,
                '^брус$' => 5,
                '^дерев\\.?$' => 4
            },
            conditions => {
                '__field__' => 'condition_id',
                '^соц\\.?\\s+ремонт$' => 2,
                '^тр\\.?\\s+ремонт$' => 6,
                'еврорем' => 4,
                '^отл\\.?\\s+сост\\.?$' => 12,
                '^хор\\.?\\s+сост\\.?$' => 11,
                '^сост\\.?\\s+хор\\.?$' => 11,
                '^удовл\\.?\\s+сост\\.?$' => 9,
                '^после\\s+строит\\.?$' => 1,
                '^сост\\.?\\s+отл\\.?$' => 12,
                '^дизайнерский ремонт$' => 5,
                '^п\\/строит\\.?$' => 1,
                '^сост\\.?\\s+удовл\\.?$' => 9,
                '^т\\.\\s*к\\.\\s*р\\.$' => 7,
                '^сделан ремонт$' => 3,
                '^норм\\.?\\s+сост\\.?$' => 10,
                '^треб\\.?\\s+ремонт$' => 6,
                '^сост\\.?\\s+норм\\.?$' => 10
            },
            room_schemes => {
                '__field__' => 'room_scheme_id',
                '^комн\\.?\\s+разд\\.?$' => 3,
                'икарус' => 5,
                '^разд\\.?\\s+комн\\.?$' => 3,
                '^смежн\\.?\\s+комн\\.?$' => 4,
                '^комн\\.?\\s+смежн\\.?$' => 4,
                '^кухня\\-гостиная$' => 2,
                '^студия$' => 1
            }
        },
    }
};

my $ua = Mojo::UserAgent->new;
$ua->max_redirects(4);


while (1) {
    say 'cycle starts';
    import_avito ();
    sleep 1;
}

sub import_avito {
    my $url_list = get_url_list();

    say Dumper $url_list;

    my $data_list = process_url_list($url_list);

    say Dumper $data_list;

    send_data($data_list);
}

sub send_data {
    my $data_list = shift;

    my $try_count = 10;

    say 'sending data';

    for my $data (@{$data_list}) {
        my $url_str = 'http://192.168.5.1:3000/api/remote_import/upload_result';
        my $data_str = Dumper $data;
        my $done = 0;
        while (!$done) {
            my $tx = $ua->post($url_str => form => {data => $data_str});
            if (my $res = $tx->success) {
              $done = 1 if $res->json->{state} eq 'ok';
              say Dumper $res->json;
            } else {

            }
            $try_count -= 1;
            if ($try_count == 0) {
                $done = 1;
                say 'fail to send';
            }
        }

    }
}

sub get_url_list {
    my $url_list;

    my $tx = $ua->get('http://192.168.5.1:3000/api/remote_import/get_task?source=avito&count=1');

    if (my $res = $tx->success) {
      $url_list = $res->json->{list};
    } else {

    }

    return $url_list;
}

sub process_url_list {
    my $url_list_ref = shift;
    my $data_list = [];

    for my $item (@$url_list_ref) {
        my $item_url = $item->{url};
        say 'processing ' . $item_url;
        my $data = {
            source_media_id => $media_id,
            source_url => $avito_url . $item_url,
            type_code => 'other',
            offer_type_code => 'sale',
            photos => [],
        };

        eval {
            sleep 20;

            my $res;
            my $try_count = 10;
            while (!$res && $try_count > 0) {
                $try_count -= 1;
                $res = get_res($avito_url . $item_url, $avito_url, 'www.avito.ru');
                sleep 5;
            }
            next unless $res;
            my $dom = $res->dom;

            # дата размещения
            my $date_str = $dom->find('div[class~="item-subtitle"]')->first->text;
            my $dt = parse_date($date_str);
            $data->{'add_date'} = $dt->datetime() . $timezone;  # fix it!
            say $data->{'add_date'};

            # тип недвижимости и тип предложения
            my $params = lc($dom->find('div[class~="item-params"]')->first->all_text);
            if ($params =~ /сдам/) {
                $data->{offer_type_code} = 'rent';
                if ($params =~ /посуточно/) {
                    $data->{rent_type} = 'short';
                }

            } else {
                $data->{offer_type_code} = 'sale';
            }

            if ($params =~ /квартир/) {
                $data->{type_code} = 'apartment';
            } elsif ($params =~ /таунхаус/) {
                $data->{type_code} = 'townhouse';
            } elsif ($params =~ /малосем/) {
                $data->{type_code} = 'apartment_small';
            } elsif ($params =~ /комнат/) {
                $data->{type_code} = 'room';
            } elsif ($params =~ /дом/) {
                $data->{type_code} = 'house';
            } elsif ($params =~ /дач/) {
                $data->{type_code} = 'dacha';
            } elsif ($params =~ /коттедж/) {
                $data->{type_code} = 'cottage';
            } elsif ($params =~ /участок/) {
                $data->{type_code} = 'land';
            } elsif ($params =~ /гараж/) {
                $data->{type_code} = 'garage';
            } elsif ($params =~ /торговое помещение/) {
                $data->{type_code} = 'market_place';
            } elsif ($params =~ /магазин/) {
                $data->{type_code} = 'market_place';
            } elsif ($params =~ /павильон/) {
                $data->{type_code} = 'market_place';
            } elsif ($params =~ /офис/) {
                $data->{type_code} = 'office_place';
            } elsif ($params =~ /нежилое помещение/) {
                $data->{type_code} = 'gpurpose_place';
            } elsif ($params =~ /склад/) {
                $data->{type_code} = 'warehouse_place';
            } elsif ($params =~ /производственное помещение/) {
                $data->{type_code} = 'production_place';
            } elsif ($params =~ /помещение свободного назначения/) {
                $data->{type_code} = 'gpurpose_place';
            } elsif ($params =~ /помещение/) {
                $data->{type_code} = 'gpurpose_place';
            }

            # описание
            my $dsk = $dom->find('div[itemprop="description"]')->first->all_text;

            # id объявления
            my $item_id = $dom->find('span[id="item_id"]')->first->text;

            $data->{'source_media_text'} = $dsk;

            # заголовок осн. информация
            my $main_title = $dom->find('h1[itemprop="name"]')->first->text;
            $main_title = trim $main_title;
            given($data->{'type_code'}) {
                when ('room') {
                    my @bp = grep { $_ && length($_) > 1 } trim(split /[,()]/, $main_title);
                    # комната м2 бла...
                    if ($bp[0] =~ /^.*?(\d{1,}).*?$/) {
                        $data->{'square_total'} = $1;
                    }
                    # d/d эт.
                    if (defined $bp[1] && $bp[1] =~ /^(\d{1,2})\/(\d{1,2}).*?$/) {
                        if ($2 >= $1) {
                            $data->{'floor'} = $1;
                            $data->{'floors_count'} = $2;
                        }
                    }
                }
                when ('apartment') {
                    my @bp = grep { $_ && length($_) > 1 } trim(split /[,()]/, $main_title);
                    # d-к квратира.
                    if ($bp[0] =~ /^(\d{1,}).*?$/) {
                        $data->{'rooms_count'} = $1;
                    }
                    # d м2.
                    if ($bp[1] =~ /^(\d{1,}).*?$/) {
                        $data->{'square_total'} = $1;
                    }
                    # d/d эт.
                    if ($bp[2] =~ /^(\d{1,2})\/(\d{1,2}).*?$/) {
                        if ($2 >= $1) {
                            $data->{'floor'} = $1;
                            $data->{'floors_count'} = $2;
                        }
                    }
                }
                when ('house') {
                    given($main_title) {
                        when (/дом/i) {
                        }
                        when (/коттедж/i) {
                            $data->{'type_code'} = 'cottage';
                        }
                        when (/дача/i) {
                            $data->{'type_code'} = 'land';
                        }
                        # wtf
                        default {
                            say 'unknown realty type!';
                            next;
                        }
                    }

                    # d м2 d сот || d м2
                    if ($main_title !~ /участке/) {
                        if ($main_title =~ /^.*?(\d{1,}).*?$/) {
                            $data->{'square_total'} = $1;
                        }
                    } elsif ($main_title =~ /^.*?(\d{1,}).*?(\d{1,}).*?$/) {
                        $data->{'square_total'} = $1;
                        $data->{'square_land'} = $2;
                        $data->{'square_land_type'} = 'ar';
                    }
                }
                when ('land') {
                    if ($main_title =~ /(\d+(?:,\d+)?)\s+кв\.\s*м/) {
                        $main_title =~ s/\s//;
                        if ($main_title =~ /^(\d{1,}).*?$/) {
                            $data->{'square_land'} = $1;
                        }
                    } elsif ($main_title =~ s/(\d+)\s+сот\.?//) {
                        $data->{'square_land'} = $1;
                        $data->{'square_land_type'} = 'ar';
                    } elsif ($main_title =~ s/(\d(?:,\d+)?)\s+га//) {
                        $data->{'square_land'} = $1 =~ s/,/./r;
                        $data->{'square_land_type'} = 'hectare';
                    }
                }
                default {}
            }

            # Разделим остальную часть обявления на части и попытаемся вычленить полезную информацию
            my @bp = grep { $_ && length($_) > 1 } trim(split /[,()]/, $data->{'source_media_text'});
            for my $el (@bp) {
                # Этаж/этажность
                if ($el =~ /^(\d{1,2})\/(\d{1,2})$/) {
                    if ($2 > $1) {
                        $data->{'floor'} = $1;
                        $data->{'floors_count'} = $2;
                    }
                    next;
                }

                for my $k (keys %{$META->{'params'}->{'dict'}}) {
                    my %dict = %{$META->{'params'}->{'dict'}->{$k}};
                    my $field = delete $dict{'__field__'};
                    for my $re (keys %dict) {
                        if ($el =~ /$re/i) {
                            $data->{$field} = $dict{$re};
                            last;
                        }
                    }
                }
            }

            # цена в рублях, переведем в тыс.
            my $price = $dom->find('span[itemprop="price"]')->first->all_text;
            $price =~s/\s//g;
            if ($price =~ /^(\d{1,}).*?$/) {
                $data->{'owner_price'} = $1 / 1000;
            }

            # адр
            if ($dom->find('meta[itemprop="addressLocality"]')->first) {
                $data->{locality} = $dom->find('meta[itemprop="addressLocality"]')->first->attr('content');
            }

            if ($dom->find('span[itemprop="streetAddress"]')->first) {
                $data->{addr} = $dom->find('span[itemprop="streetAddress"]')->first->all_text;
            }

            my @owner_phones;
            my $item_phone = '';
            my $pkey = '';
            $dom->find('script')->each(sub{
                if ($_->all_text =~ /item.phone = '(.+)'/) {
                    $item_phone = $1;
                }
            });

            $pkey = phone_demixer($item_id * 1, $item_phone);

            get_res($m_avito_url . $item_url, $avito_url, 'm.avito.ru');
            my $mr = get_res($m_avito_url . $item_url . '/phone/' . $pkey . '?async', 'https://m.avito.ru/' . $item_url, 'm.avito.ru', 'application/json, text/javascript, */*; q=0.01');

            if ($mr && $mr->json) {
                 my $phone_str = $mr->json->{phone};
                for my $x (split /[.,;:]/, $phone_str) {
                    if (my $phone_num = Util::PhoneNum->parse($x, $META->{params}->{default_phone_prefix})) {
                        push @owner_phones, $phone_num;
                        say $phone_num;
                    }
                }
            }
            $data->{'owner_phones'} = \@owner_phones;

            say 'seller: ' . $dom->find('div[class="description_seller"]')->first->text;
            if ($dom->find('div[class="description_seller"]')->first->text =~ /Агентство/i ) {   # агенство?
                my $seller = $dom->find('div[id="seller"] strong[itemprop="name"]')->first->all_text;
                say 'company: ' . $seller;
                $data->{mediator_company} = $seller;
            }

            #my $img_url = 'https://www.avito.ru/items/phone/' . $item_id . '?pkey=' . $pkey;
            #my $referer = $avito_url . $item_url;

            #$res = get_res($img_url, $referer, 'image/webp,*/*;q=0.8');
            #next unless $res;

            #$res->content->asset->move_to('/home/raven/projects/RplusImport/script/media/avito/tnumber.png');

            #chdir "/home/raven/projects/RplusImport/script/media";
            #my $ocr_string = trim(`python tess_ocr.py avito/tnumber.png avito/tmp.png avito`);

            #say 'ocr:' . $ocr_string;
            #$ocr_string =~ s/[В|в]/8/;
            #my @owner_phones;
            #for my $x (split /[.,;:]/, $ocr_string) {
            #    if (my $phone_num = Import::Util::PhoneNum->parse($x, $config->{default_phone_prefix})) {
            #        next if ($phone_num =~ /^495/);
            #        push @owner_phones, $phone_num;
            #    }
            #}

            #say 'seller: ' . $dom->find('span[class="t-seller-title"]')->first->text;
            #if ($dom->find('span[class="t-seller-title"]')->first->text =~ /Агентство/i ) {   # агенство?
            #    my $seller = $dom->find('div[id="seller"] strong[itemprop="name"]')->first->all_text;
            #    say 'company: ' . $seller;
            #    foreach (@{$data->{'owner_phones'}}) {
            #        say 'add mediator ' . $_;
            #        add_mediator($seller, $_);
            #    }
            #}

            eval {
                # вытащим фото
                $dom->find('meta[property="og:image"]')->each (sub {
                    unless ($_->{content} =~ /logo/) {
                        my $img_url = $_->{content};
                        push @{$data->{photos}}, $img_url;
                        #Import::Util::Image::load_image($id, $image, , $config->{storage}->{path}, $avito_config->{crop_image_y});
                    }
                });
            } or do {
                say $@;
            }
        }  or do {
            say $@;
        };

        push @{$data_list}, $data;
    }

    return $data_list;
}

sub parse_date {
    my $date_str = shift;
    my $res;

    say $date_str;

    my $dt_now = DateTime->now(time_zone => $timezone . '00');
    my $year = $dt_now->year();
    my $mon = $dt_now->month();
    my $mday = $dt_now->mday();

    if ($date_str =~ /сегодня в (\d{1,2}):(\d{1,2})/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2:00");
        if ($res > $dt_now) {
            # substr 1 day
            $res->subtract(days => 1);
        }
    } elsif ($date_str =~ /вчера в (\d{1,2}):(\d{1,2})/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2:00");
        # substr 1 day
        $res->subtract(days => 1);

    } elsif ($date_str =~ /Размещено (\d{1,2}) (\w+) в (\d{1,2}):(\d{1,2})/) {
        my $a_mon = month_num($2);
        $res = $parser->parse_datetime("$year-$a_mon-$1 $3:$4:00");
    }

    if ($res > $dt_now) {
        $res = $dt_now;
    }

    return $res;
}

sub get_res {
    my ($url, $referer, $host, $accept) = @_;

    say $url;

    my $res;
    my $retry = 15;

    my @headers;
    push @headers, 'Referer' => $referer if $referer;
    push @headers, 'Accept' => $accept if $accept;
    while ($retry > 0) {
        $retry -= 1;
        if ($retry < 5) {
            say 'retry left ' . $retry;
        }
        my $t = $ua->get($url, {
            'Host' => $host,
            'Connection' => 'keep-alive',
            'User-Agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36',
            'Accept-Encoding' => 'gzip,deflate,sdch',
            'Accept-Language' => 'ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4',
            @headers,
        });

        say 'code: ' . $t->res->code;

        if ($t->res->code == 200) {
            $res = $t->res;
            last;
        } elsif ($t->res->code == 404) {
            last;
        }

        sleep 5;
    }

    return $res;
}

sub phone_demixer {
    my ($id, $key) = @_;

    my @parts = $key =~ /[0-9a-f]+/g;

    my $mixed = join '', $id % 2 == 0 ? reverse @parts : @parts;
    my $s = length $mixed;
    my $r = '';
    my $k;

    for($k = 0; $k < $s; ++ $k) {
        if( $k % 3 == 0 ) {
            $r .= substr $mixed, $k, 1;
        }
    }

    return $r;
}

sub month_num {
    my $month_str = lc(shift);

    given ($month_str) {
        when (/янв/) {
            return 1;
        }
        when (/фев/) {
            return 2;
        }
        when (/мар/) {
            return 3;
        }
        when (/апр/) {
            return 4;
        }
        when (/мая/) {
            return 5;
        }
        when (/июн/) {
            return 6;
        }
        when (/июл/) {
            return 7;
        }
        when (/авг/) {
            return 8;
        }
        when (/сен/) {
            return 9;
        }
        when (/окт/) {
            return 10;
        }
        when (/ноя/) {
            return 11;
        }
        when (/дек/) {
            return 12;
        }
    }
    return 0;
}
